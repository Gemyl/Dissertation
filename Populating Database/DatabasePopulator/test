import uuid
from pybliometrics.scopus import PlumXMetrics

def getSqlSyntax(string):
    if string != None:
        return string.replace("\'", " ")
    else:
        return "-"
    
def getSafeAttribute(obj, attribute, attributeType):
    try:
        if isinstance(obj, dict):
            if((obj.get(attribute) == None) & (attributeType == "number")):
               value = 999999
            elif (obj.get(attribute) == None):
                value = "-"
            else:
                value = obj.get(attribute)
        else:
            if((obj.get(attribute) == None) & (attributeType == "number")):
               value = 999999
            elif (obj.get(attribute) == None):
                value = "-"
            else:
                value = getattr(attribute)
    except (AttributeError, KeyError):
        if attributeType == "number":
            value = 999999
        else:
            value = "-"
    
    return value

class Publication:
    def __init__(self, publicationInfo, year, doi):
        self.id = str(uuid.uuid4())
        self.doi = doi
        self.year = year
        self.title = getSqlSyntax(
            getSafeAttribute(publicationInfo, 'title', 'string')
        )
        self.journal = getSafeAttribute(publicationInfo, 'publicationName', 'string')
        self.abstract = getSqlSyntax(
            Publication.getAbstract(
                getSafeAttribute(publicationInfo, 'abstract', 'string'),
                getSafeAttribute(publicationInfo, 'description', 'string')
            )
        )
        self.keywords = Publication.getKeywords(
            getSafeAttribute(publicationInfo, 'authkeywords', 'string')
        )
        self.fields = Publication.getFields(
            getSafeAttribute(publicationInfo, 'subject_areas', 'string')
        )
        self.citationsCount = Publication.getMaximumCitationsCount(
            getSafeAttribute(publicationInfo, 'citedby_count', 'number'),
            doi
        )
        self.authorsNumber = Publication.getAuthorsNumber(
            getSafeAttribute(publicationInfo, 'authors', 'list')
        )
        self.affiliationsNumber = Publication.getAffiliationsNumber(
            getSafeAttribute(publicationInfo, 'affiliation', 'list')
        )

    def getAbstract(abstract, description):
        if abstract != None:
            return getSqlSyntax(abstract)
        elif description != None:
            return getSqlSyntax(description)
        else:
            return "-"
        
    def getKeywords(keywords):
        if keywords != None:
            return getSqlSyntax(", ".join([keyword for keyword in keywords]))
        else:
            return "-"
    
    def getFields(fields):
        if fields != None:
            return getSqlSyntax(", ".join([field[0].lower() for field in fields]))
        else:
            return "-"
    
    def getMaximumCitationsCount(citationsCount, doi):
        maxCitations = citationsCount
        plumxCitations = PlumXMetrics(doi, id_type='doi').citation

        if plumxCitations != None:
            plumxCitations = max([citation[1] for citation in plumxCitations])
            maxCitations = max(maxCitations, plumxCitations)
        else:
            maxCitations = 999999

        return maxCitations
    
    def getAuthorsNumber(authors):
        if ((authors == "-") | (authors == None)):
            return 0
        
        return len(authors)
    
    def getAffiliationsNumber(affiliations):
        if ((affiliations == "-") | (affiliations == None)):
            return 0

        return len(affiliations)
    
def removeCommonWords(abstract, commonWords):
    abstractList = abstract.split(" ")
    abstractString = " ".join(
        [word for word in abstractList if word.lower() not in commonWords])
    return abstractString

commonWords = ['a', 'an', 'the', 'and', 'or', 'but', 'if', 'of', 'at', 'by', 'for', 'with', 'about',
               'to', 'from', 'in', 'on', 'up', 'out', 'as', 'into', 'through', 'over', 'after', 'under',
               'i', 'you', 'he', 'she', 'it', 'we', 'they', 'is', 'are', 'was', 'were', 'has', 'had',
               'will', 'be', 'not', 'would', 'should', 'before', 'few', 'many', 'much', 'so', 'furthermore']

publicationInfo = {}
publication = Publication(publicationInfo, 2022, None)
publication.abstract = removeCommonWords(publication.abstract, commonWords)

print(str(publication))